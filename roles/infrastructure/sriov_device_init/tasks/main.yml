# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2019-2021 Intel Corporation

---

- name: Check if VFIO-PCI loaded
  shell: lsmod | grep vfio_pci
  register: vfio_loaded
  ignore_errors: yes
  changed_when: false

- name: Load VFIO-PCI
  modprobe:
    name: "vfio-pci"
    state: present
  when: vfio_loaded.rc != 0
  become: yes

- block:
  - name: check if FPGA SRIOV device is connected and get PCI address of devices
    shell: lspci -D | grep {{ fpga_userspace_vf.pf_device_id }} | awk '{print $1;}'
    register: fpga_pci_address
    when: fpga_userspace_vf.enabled | default (False)
    become: yes


  - name: check if ACC100 SRIOV device is connected and get PCI address of devices
    shell: lspci -D | grep {{ acc100_userspace_vf.pf_device_id }} | awk '{print $1;}'
    register: acc100_pci_address
    when: acc100_userspace_vf.enabled | default (False)
    become: yes

  - name: combine PCI addresses
    set_fact:
      pci_addresses: "{{ (fpga_pci_address.stdout_lines | default([])) + (acc100_pci_address.stdout_lines | default([])) }}"

  - name: bind FPGA and/or ACC100 SRIOV PF to IGB UIO
    include_role:
      name: infrastructure/bind_device_to_driver
    vars:
      - pci_address: "{{ item }}"
      - driver: "igb_uio"
    with_items: "{{ pci_addresses }}"

  - name: create FPGA SRIOV VFs
    shell: >
      echo 0 | sudo tee /sys/bus/pci/devices/{{ item }}/max_vfs &&
      echo {{ fpga_userspace_vf.vf_number }} | sudo tee /sys/bus/pci/devices/{{ item }}/max_vfs
    with_items:
      - "{{ fpga_pci_address.stdout_lines }}"
    when: "{{ fpga_userspace_vf.enabled }}"

  - name: create ACC100 SRIOV VFs
    shell: >
      echo 0 | sudo tee /sys/bus/pci/devices/{{ item }}/max_vfs &&
      echo {{ acc100_userspace_vf.vf_number }} | sudo tee /sys/bus/pci/devices/{{ item }}/max_vfs
    with_items:
      - "{{ acc100_pci_address.stdout_lines }}"
    when: "{{ acc100_userspace_vf.enabled }}"

  - name: enable creation of FPGA SRIOV VFs on boot
    lineinfile:
      state: present
      dest: /etc/rc.d/rc.local
      line: "echo {{ fpga_userspace_vf.vf_number }} | sudo tee /sys/bus/pci/devices/{{ item }}/max_vfs"
    with_items:
      - "{{ fpga_pci_address.stdout_lines }}"
    when: "{{ fpga_userspace_vf.enabled }}"
    become: yes

  - name: enable creation of ACC100 SRIOV VFs on boot
    lineinfile:
      state: present
      dest: /etc/rc.d/rc.local
      line: "echo {{ acc100_userspace_vf.vf_number }} | sudo tee /sys/bus/pci/devices/{{ item }}/max_vfs"
    with_items:
      - "{{ acc100_pci_address.stdout_lines }}"
    when: "{{ acc100_userspace_vf.enabled }}"
    become: yes

  - name: get FPGA SRIOV PCI address of devices
    shell: lspci -D | grep {{ fpga_userspace_vf.vf_device_id }} | awk '{print $1;}'
    register: fpga_vf_pci_address
    when: fpga_userspace_vf.enabled | default (False)
    become: yes

  - name: get ACC100 VF PCI address of devices
    shell: lspci -D | grep {{ acc100_userspace_vf.vf_device_id }} | awk '{print $1;}'
    register: acc100_vf_pci_address
    when: acc100_userspace_vf.enabled | default (False)
    become: yes

  - name: zip VF PCI addresses with their drivers
    set_fact:
      acc100_vf_pci_address_drivers: "{{ acc100_vf_pci_address.stdout_lines | default([]) | zip_longest([], fillvalue=acc100_userspace_vf.vf_driver) | list }}"
      fpga_vf_pci_address_drivers: "{{ fpga_vf_pci_address.stdout_lines | default([]) | zip_longest([], fillvalue=fpga_userspace_vf.vf_driver) | list }}"

  - name: bind FPGA and/or ACC100 SRIOV VFs to userspace driver
    include_role:
      name: infrastructure/bind_device_to_driver
    vars:
      - pci_address: "{{ item.0 }}"
      - driver: "{{ item.1 }}"
    loop: "{{ acc100_vf_pci_address_drivers + fpga_vf_pci_address_drivers }}"
  when: fpga_userspace_vf.enabled or acc100_userspace_vf.enabled

- name: get SR-IOV ethernet interfaces from /etc/rc.d/rc.local
  # ignore missing pipefail - we don't want to fail when grep does not find a line - we can continue with no lines
  shell: cat /etc/rc.d/rc.local 2> /dev/null | grep sriov_numvfs | sed -e 's/.*> //' # noqa 306
  register: sriov_ifaces
  changed_when: false

- name: disable SR-IOV ethernet interfaces while ignoring QAT devices
  shell: |
    bdf=$(echo {{ item }} | awk -F/ '{print $6}')
    bdf=${bdf#*:}
    qat=$(lspci -nnvv | grep -i quick | grep $bdf)
    [[ $? == 0 ]] && echo  "Ignore QAT device $bdf " || echo 0 > {{ item }}
  with_items: "{{ sriov_ifaces.stdout_lines }}"
  changed_when: true
  become: yes

- name: clear SR-IOV boot time setup
  lineinfile:
    path: /etc/rc.d/rc.local
    regexp: '(.*)sriov_numvfs(.*)'
    state: absent
  become: yes

- name: checking network interfaces for SR-IOV support
  stat:
    path: /sys/class/net/{{ item.key }}/device/sriov_numvfs
  loop: "{{ query('dict', sriov.network_interfaces) }}"
  register: sriov_support

- name: checking if device support SR-IOV
  fail:
    msg: 'The device does not support SR-IOV'
  with_items: "{{ sriov_support.results }}"
  when: not item.stat.exists

- name: enable SR-IOV for network interfaces
  shell: echo 0 > /sys/class/net/{{ item.key }}/device/sriov_numvfs && echo {{ item.value }} > /sys/class/net/{{ item.key }}/device/sriov_numvfs
  loop: "{{ query('dict', sriov.network_interfaces) }}"
  changed_when: true
  become: yes

- name: enable SR-IOV for network interfaces at boot time
  lineinfile:
    path: /etc/rc.d/rc.local
    line: "echo {{ item.value }} > /sys/class/net/{{ item.key }}/device/sriov_numvfs"
  loop: "{{ query('dict', sriov.network_interfaces) }}"
  become: yes

- name: enable SR-IOV startup
  file:
    dest: /etc/rc.d/rc.local
    mode: a+x
  become: yes
